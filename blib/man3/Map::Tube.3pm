.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Map::Tube 3pm"
.TH Map::Tube 3pm 2024-08-25 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Map::Tube \- Lightweight Routing Framework.
.SH VERSION
.IX Header "VERSION"
Version 3.71
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The core module defined as Role (Moo) to process  the map data.  It provides the
interface to find the shortest route in terms of stoppage between two nodes.Also
you can get all possible routes between two given nodes.
.PP
If you are keen to know the internals of Map::Tube then please follow the note
documented in Map::Tube::Cookbook.
.SH "MAP LEADER BOARD"
.IX Header "MAP LEADER BOARD"
.Vb 10
\&    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&    | Author              | PAUSE ID | Map Count (City)                         |
\&    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&    | Michal Josef Spacek | SKIM     | 22 (Bucharest, Budapest, Dnipropetrovsk, |
\&    |                     |          | Kazan, Kharkiv, Kiev, KualaLumpur,       |
\&    |                     |          | Malaga, Minsk, Moscow, Nanjing,          |
\&    |                     |          | NizhnyNovgorod, Novosibirsk, Prague,     |
\&    |                     |          | SaintPetersburg, Samara, Singapore,      |
\&    |                     |          | Sofia, Tbilisi, Vienna, Warsaw,          |
\&    |                     |          | Yekaterinburg                            |
\&    |                     |          |                                          |
\&    | Mohammad S Anwar    | MANWAR   | 7 (Barcelona, Delhi, Kolkatta, London,   |
\&    |                     |          | Madrid, NYC, Tokyo)                      |
\&    |                     |          |                                          |
\&    | Gisbert W Selke     | GWS      | 4 (Beijing, Glasgow, KoelnBonn, Lyon)    |
\&    |                     |          |                                          |
\&    | Renee Baecker       | RENEEB   | 1 (Frankfurt)                            |
\&    |                     |          |                                          |
\&    | Stefan Limbacher    | STELIM   | 1 (Nuremberg)                            |
\&    |                     |          |                                          |
\&    | Slaven Rezic        | SREZIC   | 1 (Berlin)                               |
\&    |                     |          |                                          |
\&    | Errietta Kostala    | ERRIETTA | 1 (Athens)                               |
\&    |                     |          |                                          |
\&    | Marco Fontani       | MFONTANI | 1 (Milan)                                |
\&    |                     |          |                                          |
\&    | Soren Lund          | SLU      | 1 (Copenhagen)                           |
\&    |                     |          |                                          |
\&    | FUNG Cheok Yin      | CYFUNG   | 1 (Hong Kong)                            |
\&    |                     |          |                                          |
\&    | Vitali Peil         | VPEIL    | 1 (Bielefeld)                            |
\&    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.SS "Common Usage"
.IX Subsection "Common Usage"
.Vb 2
\&    use strict; use warnings;
\&    use Map::Tube::London;
\&
\&    my $map = Map::Tube::London\->new;
\&    print $map\->get_shortest_route(\*(AqBaker Street\*(Aq, \*(AqEuston Square\*(Aq), "\en";
.Ve
.PP
You should expect the result like below:
.PP
.Vb 1
\&    Baker Street (Circle, Hammersmith & City, Bakerloo, Metropolitan, Jubilee), Great Portland Street (Circle, Hammersmith & City, Metropolitan), Euston Square (Circle, Hammersmith & City, Metropolitan)
.Ve
.SS "Special Usage"
.IX Subsection "Special Usage"
.Vb 2
\&    use strict; use warnings;
\&    use Map::Tube::London;
\&
\&    my $map = Map::Tube::London\->new;
\&    print $map\->get_shortest_route(\*(AqBaker Street\*(Aq, \*(AqEuston Square\*(Aq)\->preferred, "\en";
.Ve
.PP
You should now expect the result like below:
.PP
.Vb 1
\&    Baker Street (Circle, Hammersmith & City, Metropolitan), Great Portland Street (Circle, Hammersmith & City, Metropolitan), Euston Square (Circle, Hammersmith & City, Metropolitan)
.Ve
.SH METHODS
.IX Header "METHODS"
.ie n .SS "get_shortest_routes($from, $to)"
.el .SS "get_shortest_routes($from, \f(CW$to\fP)"
.IX Subsection "get_shortest_routes($from, $to)"
It expects \f(CW$from\fR and \f(CW$to\fR station name, required param. It returns an object
of type Map::Tube::Route. On error it throws exception of type Map::Tube::Exception.
.ie n .SS "get_all_routes($from, $to) *** EXPERIMENTAL ***"
.el .SS "get_all_routes($from, \f(CW$to\fP) *** EXPERIMENTAL ***"
.IX Subsection "get_all_routes($from, $to) *** EXPERIMENTAL ***"
It expects \f(CW$from\fR and \f(CW$to\fR station name, required param. It  returns ref to a
list of objects of type Map::Tube::Route. On error it throws exception of type
Map::Tube::Exception.
.PP
Be carefull when using against a large map. You  may encounter warning similar to
as shown below when run against London map.
.PP
Deep recursion on subroutine "Map::Tube::_get_all_routes"
.PP
However for comparatively smaller map, like below,it is happy to give all routes.
.PP
.Vb 5
\&      A(1)  \-\-\-\-  B(2)
\&     /              \e
\&    C(3)  \-\-\-\-\-\-\-\-  F(6) \-\-\- G(7) \-\-\-\- H(8)
\&     \e              /
\&      D(4)  \-\-\-\-  E(5)
.Ve
.SS \fBname()\fP
.IX Subsection "name()"
Returns map name.
.SS get_node_by_id($node_id)
.IX Subsection "get_node_by_id($node_id)"
Returns an object of type Map::Tube::Node.
.SS get_node_by_name($node_name)
.IX Subsection "get_node_by_name($node_name)"
Returns ref  to a list of object(s) of type Map::Tube::Node matching node name
\&\f(CW$node_name\fR in scalar context otherwise returns just a list.
.SS get_line_by_id($line_id)
.IX Subsection "get_line_by_id($line_id)"
Returns an object of type Map::Tube::Line.
.SS get_line_by_name($line_name)
.IX Subsection "get_line_by_name($line_name)"
Returns an object of type Map::Tube::Line.
.SS \fBget_lines()\fP
.IX Subsection "get_lines()"
Returns ref to a list of objects of type Map::Tube::Line.
.SS get_stations($line_name)
.IX Subsection "get_stations($line_name)"
Returns ref to a list of objects of type Map::Tube::Node for the \f(CW$line_name\fR.
If \f(CW$line_name\fR is missing, it would return all stations in the map.
.SS get_next_stations($station_name)
.IX Subsection "get_next_stations($station_name)"
Returns ref to a list of next stations from the given \f(CW$station_name\fR as objects
of type Map::Tube::Node.
.SS bgcolor($color)
.IX Subsection "bgcolor($color)"
Set the background color for the map. It is optional. Please set it before making
call to method "as_image($line_name)" in Map::Tube::Plugin::Graph. If not set, it
will try to guess and may not be as good as you would expect.The \f(CW$color\fR can be
a simply color name or hash code.
.SH PLUGINS
.IX Header "PLUGINS"
.SS Map::Tube::Plugin::Graph
.IX Subsection "Map::Tube::Plugin::Graph"
The Map::Tube::Plugin::Graph plugin adds the support to generate the entire map
or map for a particular line as base64 encoded string (png image).
As of \f(CW\*(C`Map::Tube\*(C'\fR v3.54 or above, you can now set the background color explicitly.
.PP
.Vb 3
\&    use strict; use warnings;
\&    use MIME::Base64;
\&    use Map::Tube::London;
\&
\&    my $tube = Map::Tube::London\->new;
\&
\&    # Optionally, you can override the default background color.
\&    $tube\->bgcolor("gray");
\&
\&    # Entire map image
\&    my $name = $tube\->name;
\&    open(my $MAP_IMAGE, ">", "$name.png")
\&        or die "ERROR: Can\*(Aqt open [$name.png]: $!";
\&    binmode($MAP_IMAGE);
\&    print $MAP_IMAGE decode_base64($tube\->as_image);
\&    close($MAP_IMAGE);
\&
\&    # Just a particular line map image
\&    my $line = \*(AqBakerloo\*(Aq;
\&    open(my $LINE_IMAGE, ">", "$line.png")
\&        or die "ERROR: Can\*(Aqt open [$line.png]: $!";
\&    binmode($LINE_IMAGE);
\&    print $LINE_IMAGE decode_base64($tube\->as_image($line));
\&    close($LINE_IMAGE);
.Ve
.PP
Please refer to the documentation for more details.
.SS Map::Tube::Plugin::Formatter
.IX Subsection "Map::Tube::Plugin::Formatter"
The Map::Tube::Plugin::Formatter plugin adds the  support to format the object
supported by the plugin.
.PP
.Vb 2
\&    use strict; use warnings;
\&    use Map::Tube::London;
\&
\&    my $tube = Map::Tube::London\->new;
\&
\&    my $node = $tube\->get_node_by_name(\*(AqBaker Street\*(Aq);
\&    print $node\->to_xml,    "\en\en";
\&    print $node\->to_json,   "\en\en";
\&    print $node\->to_yaml,   "\en\en";
\&    print $node\->to_string, "\en\en";
\&
\&    my $line = $tube\->get_line_by_name(\*(AqMetropolitan\*(Aq);
\&    print $line\->to_xml,    "\en\en";
\&    print $line\->to_json,   "\en\en";
\&    print $line\->to_yaml,   "\en\en";
\&    print $line\->to_string, "\en\en";
\&
\&    my $route = $tube\->get_shortest_route(\*(AqBaker Street\*(Aq, \*(AqWembley Park\*(Aq);
\&    print $route\->to_xml,   "\en\en";
\&    print $route\->to_json,  "\en\en";
\&    print $route\->to_yaml,  "\en\en";
\&    print $route\->to_string,"\en\en";
.Ve
.PP
Please refer to the documentation for more info.
.SS Map::Tube::Plugin::FuzzyFind
.IX Subsection "Map::Tube::Plugin::FuzzyFind"
Gisbert W. Selke, built the add-on for Map::Tube to find stations and lines by
name, possibly partly or inexactly specified. The module is a Moo role which gets
plugged into the Map::Tube::* family automatically once it is installed.
.PP
.Vb 2
\&    use strict; use warnings;
\&    use Map::Tube::London;
\&
\&    my $tube = Map::Tube::London\->new();
\&
\&    print \*(Aqline matches exactly: \*(Aq, scalar($tube\->fuzzy_find(search => \*(Aqerloo\*(Aq, objects => \*(Aqlines\*(Aq)), "\en";
\&    print \*(Aqline contains       : \*(Aq, scalar($tube\->fuzzy_find(search => \*(Aqerloo\*(Aq, objects => \*(Aqlines\*(Aq, method  => \*(Aqin\*(Aq)), "\en";
.Ve
.PP
Please refer to the documentation for more info.
.SH "MAP DATA FORMAT"
.IX Header "MAP DATA FORMAT"
Map data can be represented in JSON or XML format. The preferred  format is JSON.
\&\f(CW\*(C`Map::Tube v3.23\*(C'\fR or above comes with a handy script \f(CW\*(C`map\-data\-converter\*(C'\fR, that
can be used to change the data format of an existing map data.Below is how we can
represet the sample map:
.PP
.Vb 5
\&      A(1)  \-\-\-\-  B(2)
\&     /              \e
\&    C(3)  \-\-\-\-\-\-\-\-  F(6) \-\-\- G(7) \-\-\-\- H(8)
\&     \e              /
\&      D(4)  \-\-\-\-  E(5)
.Ve
.SS JSON
.IX Subsection "JSON"
.Vb 10
\&   {
\&       "name"  : "sample map",
\&       "lines" : {
\&           "line" : [
\&               { "id" : "A", "name" : "A", "color" : "red"     },
\&               { "id" : "B", "name" : "B", "color" : "#FFFF00" }
\&           ]
\&       },
\&       "stations" : {
\&           "station" : [
\&               { "id" : "A1", "name" : "A1", "line" : "A",   "link" : "B2,C3"    },
\&               { "id" : "B2", "name" : "B2", "line" : "A",   "link" : "A1,F6"    },
\&               { "id" : "C3", "name" : "C3", "line" : "A,B", "link" : "A1,D4,F6" },
\&               { "id" : "D4", "name" : "D4", "line" : "A,B", "link" : "C3,E5"    },
\&               { "id" : "E5", "name" : "E5", "line" : "B",   "link" : "D4,F6"    },
\&               { "id" : "F6", "name" : "F6", "line" : "B",   "link" : "B2,C3,E5" },
\&               { "id" : "G7", "name" : "G7", "line" : "B",   "link" : "F6,H8"    },
\&               { "id" : "H8", "name" : "H8", "line" : "B",   "link" : "G7"       }
\&           ]
\&       }
\&   }
.Ve
.SS XML
.IX Subsection "XML"
.Vb 10
\&    <?xml version="1.0" encoding="UTF\-8"?>
\&    <tube name="sample map">
\&        <lines>
\&            <line id="A" name="A" color="red"    />
\&            <line id="B" name="B" color="#FFFF00"/>
\&        </lines>
\&        <stations>
\&            <station id="A1" name="A1" line="A"   link="B2,C3"   />
\&            <station id="B2" name="B2" line="A"   link="A1,F6"   />
\&            <station id="C3" name="C3" line="A,B" link="A1,D4,F6"/>
\&            <station id="D4" name="D4" line="A,B" link="C3,E5"   />
\&            <station id="E5" name="E5" line="B"   link="D4,F6"   />
\&            <station id="F6" name="F6" line="B"   link="B2,C3,E5"/>
\&            <station id="G7" name="G7" line="B"   link="F6,H8"   />
\&            <station id="H8" name="H8" line="B"   link="G7"      />
\&        </stations>
\&    </tube>
.Ve
.SH "MAP VALIDATION"
.IX Header "MAP VALIDATION"
.SS "DATA VALIDATION"
.IX Subsection "DATA VALIDATION"
The package Test::Map::Tube can easily be used to validate raw map data.Anyone
building a new map using Map::Tube is advised to have a unit test as a part of
their distribution.Just like in Map::Tube::London package,there is a unit test
something like below:
.PP
.Vb 3
\&    use strict; use warnings;
\&    use Test::More;
\&    use Map::Tube::London;
\&
\&    eval "use Test::Map::Tube";
\&    plan skip_all => "Test::Map::Tube required" if $@;
\&
\&    ok_map(Map::Tube::London\->new);
.Ve
.SS "FUNCTIONAL VALIDATION"
.IX Subsection "FUNCTIONAL VALIDATION"
The package Test::Map::Tube v0.09 or above  can easily be used to validate map
basic functions provided by Map::Tube. However we recommend v0.35 or above.
.PP
.Vb 2
\&    use strict; use warnings;
\&    use Test::More;
\&
\&    my $min_ver = 0.35;
\&    eval "use Test::Map::Tube $min_ver";
\&    plan skip_all => "Test::Map::Tube $min_ver required" if $@;
\&
\&    use Map::Tube::London;
\&    ok_map_functions(Map::Tube::London\->new);
.Ve
.PP
The package Test::Map::Tube v0.17 or above  can easily be used to validate map
routing functions provided by Map::Tube. However we recommend v0.35 or above.
.PP
.Vb 2
\&    use strict; use warnings;
\&    use Test::More;
\&
\&    my $min_ver = 0.35;
\&    eval "use Test::Map::Tube $min_ver tests => 1";
\&    plan skip_all => "Test::Map::Tube $min_ver required" if $@;
\&
\&    use Map::Tube::London;
\&    my $map = Map::Tube::London\->new;
\&
\&    my @routes = (
\&        "Route 1|Tower Gateway|Aldgate|Tower Gateway,Tower Hill,Aldgate",
\&        "Route 2|Liverpool Street|Monument|Liverpool Street,Bank,Monument",
\&    );
\&
\&    ok_map_routes($map, \e@routes);
.Ve
.SH AUTHOR
.IX Header "AUTHOR"
Mohammad Sajid Anwar, \f(CW\*(C`<mohammad.anwar at yahoo.com>\*(C'\fR
.SH REPOSITORY
.IX Header "REPOSITORY"
<https://github.com/manwar/Map\-Tube>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP \(bu 2
Map::Tube::Cookbook
.IP \(bu 2
Map::Tube::CLI
.IP \(bu 2
Map::Metro
.SH CONTRIBUTORS
.IX Header "CONTRIBUTORS"
.IP \(bu 2
Michal Špaček, \f(CW\*(C`<skim at cpan.org>\*(C'\fR
.IP \(bu 2
Slaven Rezic, \f(CW\*(C`<srezic at cpan.org>\*(C'\fR
.IP \(bu 2
Gisbert W. Selke, \f(CW\*(C`<gws at cpan.org>\*(C'\fR
.IP \(bu 2
Toby Inkster, \f(CW\*(C`<tobyink at cpan.org>\*(C'\fR
.SH BUGS
.IX Header "BUGS"
Please report any bugs or feature requests through the web interface at <https://github.com/manwar/Map\-Tube/issues>.
I will  be notified and then you'll automatically be notified of progress on your
bug as I make changes.
.SH SUPPORT
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Map::Tube
.Ve
.PP
You can also look for information at:
.IP \(bu 4
BUG Report
.Sp
<https://github.com/manwar/Map\-Tube/issues>
.IP \(bu 4
AnnoCPAN: Annotated CPAN documentation
.Sp
<http://annocpan.org/dist/Map\-Tube>
.IP \(bu 4
CPAN Ratings
.Sp
<http://cpanratings.perl.org/d/Map\-Tube>
.IP \(bu 4
Search MetaCPAN
.Sp
<https://metacpan.org/dist/Map\-Tube/>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (C) 2010 \- 2024 Mohammad Sajid Anwar.
.PP
This program  is  free software; you can redistribute it and / or modify it under
the  terms  of the the Artistic License (2.0). You may obtain a  copy of the full
license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any  use,  modification, and distribution of the Standard or Modified Versions is
governed by this Artistic License.By using, modifying or distributing the Package,
you accept this license. Do not use, modify, or distribute the Package, if you do
not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made by someone
other than you,you are nevertheless required to ensure that your Modified Version
 complies with the requirements of this license.
.PP
This  license  does  not grant you the right to use any trademark,  service mark,
tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge patent license
to make,  have made, use,  offer to sell, sell, import and otherwise transfer the
Package with respect to any patent claims licensable by the Copyright Holder that
are  necessarily  infringed  by  the  Package. If you institute patent litigation
(including  a  cross-claim  or  counterclaim) against any party alleging that the
Package constitutes direct or contributory patent infringement,then this Artistic
License to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer  of  Warranty:  THE  PACKAGE  IS  PROVIDED BY THE COPYRIGHT HOLDER AND
CONTRIBUTORS  "AS IS'  AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES. THE IMPLIED
WARRANTIES    OF   MERCHANTABILITY,   FITNESS   FOR   A   PARTICULAR  PURPOSE, OR
NON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT PERMITTED BY YOUR LOCAL LAW. UNLESS
REQUIRED BY LAW, NO COPYRIGHT HOLDER OR CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL,  OR CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE
OF THE PACKAGE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
